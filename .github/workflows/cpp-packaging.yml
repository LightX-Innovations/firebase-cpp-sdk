name: CPP binary SDK packaging
on:
  push:
    branches:
      # Run a full packaging step any time a new branch is merged into main.
      - main
  schedule:
    - cron: "0 8 * * *"  # 8am UTC = 12am PST / 1am PDT
  workflow_dispatch:
    inputs:
      preserveIntermediateArtifacts:
        description: 'preserve intermediate artifacts?'
        default: '0'
      verboseBuild:
        description: 'verbose build?'
        default: '0'
      skipIntegrationTests:
        description: 'skip integration tests?'
        default: '0'
      downloadPublicVersion:
        description: 'public version # to test against'
      downloadPreviousRun:
        description: 'previous run # to test against'
      use_expanded_matrix:
        description: 'Use an expanded matrix?'
        default: '0'
        required: true

env:
  # Packaging prerequisites
  # Demumble version from March 22, 2022
  demumbleVer: "df938e45c2b0e064fb5323d88b692d03b451d271"
  # Use SHA256 for hashing files.
  hashCommand: "sha256sum"
  # Xcode version 15.1 is the version we build the SDK with.
  # Our MacOS runners will use the version in /Applications/Xcode_${xcodeVersion}.app
  xcodeVersion: "15.1"
  # LLVM version with ARM MachO support has no version number yet.
  llvmVer: "5f187f0afaad33013ba03454c4749d99b1362534"
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  log_inputs:
    name: log-inputs
    runs-on: ubuntu-20.04
    steps:
      - name: log run inputs
        run: |
          if [[ -n "${{ github.event.inputs.downloadPublicVersion }}" ]]; then
            echo "::warning ::Downloading public SDK package from https://dl.google.com/firebase/sdk/cpp/firebase_cpp_sdk_${{ github.event.inputs.downloadPublicVersion }}.zip"
          elif [[ -n "${{ github.event.inputs.downloadPreviousRun }}" ]]; then
            echo "::warning ::Downloading SDK package from previous run at https://github.com/firebase/firebase-cpp-sdk/actions/runs/${{ github.event.inputs.downloadPreviousRun }}"
          fi

      - name: log if skipping integration tests
        if: |
          github.event.inputs.skipIntegrationTests != 0 && github.event.inputs.skipIntegrationTests != ''
        run: echo "::warning ::Skipping integration tests."

      - name: log if preserving intermediate artifacts
        if: |
          github.event.inputs.preserveIntermediateArtifacts != 0 && github.event.inputs.preserveIntermediateArtifacts != '' &&
          github.event.inputs.downloadPublicVersion == '' && github.event.inputs.downloadPreviousRun == ''
        run: echo "::warning ::Intermediate artifacts will be preserved."

      - name: log if verbose build enabled
        if: |
          github.event.inputs.verboseBuild != 0 && github.event.inputs.verboseBuild != '' &&
          github.event.inputs.downloadPublicVersion == '' && github.event.inputs.downloadPreviousRun == ''
        run: echo "::warning ::Verbose build enabled."

      - name: log if expanded matrix enabled
        if: github.event_name == 'schedule' || github.event.inputs.use_expanded_matrix == '1'
        run: echo "::warning ::Expanded test matrix enabled."

  build_tools:
    name: build-tools-${{ matrix.tools_platform }}
    runs-on: ${{ matrix.os }}
    if: ${{ github.event.inputs.downloadPublicVersion == '' && github.event.inputs.downloadPreviousRun == '' }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        include:
        - os: ubuntu-20.04
          tools_platform: linux
          # Binutils 2.35.1 released Sep 19, 2020
          binutils_version: "2.35.1"

    steps:
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Fetch and build binutils
        run: |
          set +e
          # Retry up to 10 times because Curl has a tendency to timeout on
          # Github runners.
          for retry in {1..10} error; do
          if [[ $retry == "error" ]]; then exit 5; fi
            curl -L https://ftpmirror.gnu.org/binutils/binutils-${{ matrix.binutils_version }}.tar.xz --output binutils.tar.xz && break
            sleep 300
          done
          set -e

          tar -xf binutils.tar.xz
          mv ./binutils-${{ matrix.binutils_version }} ./binutils-src
          mkdir /tmp/binutils-output
          cd binutils-src
          ./configure --enable-targets=all --prefix=/tmp/binutils-output
          make -j2
          make install
          cd -
          mkdir -p packaging-tools
          cp -af /tmp/binutils-output/bin/* packaging-tools

      - name: fetch demumble
        uses: actions/checkout@v3
        with:
          repository: nico/demumble
          path: demumble-src
          ref: ${{ env.demumbleVer }}

      - name: build demumble
        run: |
          cd demumble-src
          cmake .
          cmake --build .
          python demumble_test.py
          cd -
          mkdir -p packaging-tools
          cp -af demumble-src/demumble packaging-tools

      - name: archive tools
        run: |
          cd packaging-tools
          ls
          tar -czhf ../packaging-tools.tgz .

      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packaging-tools-${{ matrix.tools_platform }}
          path: packaging-tools.tgz

  build_desktop:
    name: build-${{ matrix.sdk_platform }}-${{ matrix.architecture }}-${{ matrix.build_type }}-${{ matrix.msvc_runtime }}-${{ matrix.linux_abi }}
    runs-on: ${{ matrix.os }}
    if: ${{ github.event.inputs.downloadPublicVersion == '' && github.event.inputs.downloadPreviousRun == '' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        build_type: ["Release", "Debug"]
        architecture: ["x64"]
        linux_abi: ["c++11"]
        python_version: [3.8]
        include:
          # Find way to only build app and auth
        - os: ubuntu-20.04
          vcpkg_triplet_suffix: "linux"
          additional_build_flags: ""
          sdk_platform: "linux"
        exclude:
        - os: ubuntu-20.04
          build_type: "Debug"

    steps:
      - name: Store git credentials for all git commands
        # Forces all git commands to use authenticated https, to prevent throttling.
        shell: bash
        run: |
          git config --global credential.helper 'store --file /tmp/git-credentials'
          echo 'https://${{ github.token }}@github.com' > /tmp/git-credentials

      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set env variables for subsequent steps (all)
        shell: bash
        run: |
          echo "VCPKG_RESPONSE_FILE=external/vcpkg_${{ matrix.vcpkg_triplet }}_response_file.txt" >> $GITHUB_ENV
          echo "MATRIX_UNIQUE_NAME=${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.architecture }}-${{ matrix.python_version }}-${{ matrix.msvc_runtime }}-${{ matrix.linux_abi }}" >> $GITHUB_ENV
          echo "SDK_NAME=${{ matrix.sdk_platform }}-${{ matrix.architecture }}-${{ matrix.build_type }}-${{ matrix.msvc_runtime }}-${{ matrix.linux_abi }}" >> $GITHUB_ENV

      - name: Cache vcpkg C++ dependencies
        id: cache_vcpkg
        uses: actions/cache@v3
        with:
          path: external/vcpkg/installed
          key: dev-vcpkg-${{ matrix.architecture }}-${{ matrix.vcpkg_triplet_suffix }}-${{ matrix.msvc_runtime }}-${{ matrix.linux_abi }}-${{ hashFiles(format('{0}', env.VCPKG_RESPONSE_FILE)) }}-${{ hashFiles('.git/modules/external/vcpkg/HEAD') }}${{env.VCPKG_EXTRA_HASH}}

      - name: Cache ccache files
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        id: cache_ccache
        uses: actions/cache@v3
        with:
          path: ccache_dir
          key: dev-test-ccache-${{ env.MATRIX_UNIQUE_NAME }}

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install Desktop SDK prerequisites
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          command: |
            python scripts/gha/install_prereqs_desktop.py --gha_build --arch '${{ matrix.architecture }}' --ssl boringssl

      - name: Export verbose flag
        shell: bash
        run: |
          verbose_flag=
          if [[ -n "${{ github.event.inputs.verboseBuild }}" && "${{ github.event.inputs.verboseBuild }}" -ne 0 ]]; then
            verbose_flag=--verbose
          fi
          echo "VERBOSE_FLAG=${verbose_flag}" >> $GITHUB_ENV
      
      # Run the build in the host OS default shell since Windows can't handle long path names in bash.
      - name: Build desktop SDK
        run: |
          python scripts/gha/build_desktop.py --arch "${{ matrix.architecture }}" \
                                              --config "${{ matrix.build_type }}" \
                                              --msvc_runtime_library "${{ matrix.msvc_runtime }}" \
                                              --linux_abi "${{ matrix.linux_abi }}" \
                                              --build_dir out-sdk \
                                              ${VERBOSE_FLAG} \
                                              ${{ matrix.additional_build_flags }} \
                                              --gha_build

      - name: Archive SDK
        shell: bash
        run: |
          cd out-sdk
          find .. -type f -print > src_file_list.txt
          # Remove intermediate build files (.o and .obj) files to save space.
          find . -type f -name '*.o' -or -name '*.obj' -print0 | xargs -0 rm -f --
          tar -czhf ../firebase-cpp-sdk-${{ env.SDK_NAME }}-build.tgz .

      - name: Print built libraries
        shell: bash
        run: |
          find out-* -name "*.lib"
          find out-* -name "*.dll"
          find out-* -name "*.dylib"
          find out-* -name "*.a"
          find out-* -name "*.so"
          find out-* -name "*.framework"

      - name: Inspect firebase libraries for cpu arch and msvc runtime.
        shell: bash
        run: |
          python scripts/gha/inspect_built_libraries.py out-sdk/
        continue-on-error: true

      - name: upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: firebase-cpp-sdk-${{ env.SDK_NAME }}-build
          path: firebase-cpp-sdk-${{ env.SDK_NAME }}-build.tgz

  package_desktop:
    name: package-${{ matrix.sdk_platform }}${{ matrix.suffix }}
    runs-on: ubuntu-20.04
    needs: [build_tools, build_desktop]
    if: ${{ github.event.inputs.downloadPublicVersion == '' && github.event.inputs.downloadPreviousRun == '' }}
    strategy:
      fail-fast: false
      matrix:
        sdk_platform: [linux]
        suffix: ['']

    steps:
      - name: fetch SDK
        uses: actions/checkout@v3
        with:
          path: sdk-src

      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          # download-artifact doesn't support wildcards, but by default
          # will download all artifacts. Sadly this is what we must do.
          path: artifacts

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Install prerequisites
        run: |
          cd sdk-src
          python scripts/gha/install_prereqs_desktop.py --ssl boringssl
          cd ..
          if [[ $(uname) == "Darwin"* ]]; then
            brew install parallel
          fi

      - name: Check extracted files
        run: |
            tar -tzf artifacts/firebase-cpp-sdk-${{ matrix.sdk_platform }}${{ matrix.suffix }}-build.tgz

      - name: postprocess and package built SDK
        run: |
          mkdir -p bin
          tools_platform=linux
          verbose_flag=
          if [[ -n "${{ github.event.inputs.verboseBuild }}" && "${{ github.event.inputs.verboseBuild }}" -ne 0 ]]; then
            verbose_flag=-v
          fi
          declare -a additional_flags
          tar -xvzf artifacts/packaging-tools-${tools_platform}/packaging-tools.tgz -C bin
          chmod -R u+x bin
          for pkg in artifacts/firebase-cpp-sdk-${{ matrix.sdk_platform }}${{ matrix.suffix }}*-build/*.tgz; do
            echo "${pkg}"
            variant=$(sdk-src/build_scripts/desktop/get_variant.sh "${pkg}")
            additional_flags=(${verbose_flag})
            sdk-src/build_scripts/desktop/package.sh -b ${pkg} -o firebase-cpp-sdk-${{ matrix.sdk_platform }}${{ matrix.suffix }}-package -p ${{ matrix.sdk_platform }} -t bin -d ${variant} -P python3 -j ${additional_flags[*]}
          done
          cd firebase-cpp-sdk-${{ matrix.sdk_platform }}${{ matrix.suffix }}-package
          tar -czhf ../firebase-cpp-sdk-${{ matrix.sdk_platform }}${{ matrix.suffix }}-package.tgz .

      - name: Print package contents
        shell: bash
        run: |
          find firebase-cpp-sdk-*-package -type f

      - name: upload SDK zip
        uses: actions/upload-artifact@v3
        with:
          name: firebase-cpp-sdk-${{ matrix.sdk_platform }}${{ matrix.suffix}}-package
          path: firebase-cpp-sdk-${{ matrix.sdk_platform }}${{ matrix.suffix}}-package.tgz

      - name: Check for unrenamed namespaces
        shell: bash
        run: |
          set +e
          if [[ "${{ matrix.sdk_platform }}" == "darwin" ]]; then
            nm=bin/llvm-nm
          elif [[ "${{ matrix.sdk_platform }}" == "windows" ]]; then
            if [[ "${{ matrix.sdk_platform }}" == *"x64"* ]]; then
              nm="bin/nm --target pe-x86-64"
            else
              nm="bin/nm --target pe-i386"
            fi
          else  # sdk_platform = linux
            nm=bin/nm
          fi
          ${nm} `find firebase-cpp-sdk-*-package/libs/${{ matrix.sdk_platform }} -type f` | grep '^[0-9a-fA-F][0-9a-fA-F]* ' | cut -d' ' -f3- > raw_symbols.txt
          if [[ "${{ matrix.sdk_platform }}" == "windows" ]]; then
            cat raw_symbols.txt | sort | uniq | bin/demumble | grep '^[a-zA-Z_]*::' > cpp_symbols.txt
          elif [[ "${{ matrix.sdk_platform }}" == "darwin" ]]; then
            # remove leading _ on mach-o symbols
            cat raw_symbols.txt | sort | uniq | sed 's/^_//' | bin/c++filt | grep '^[a-zA-Z_]*::' > cpp_symbols.txt
          else  # linux
            cat raw_symbols.txt | sort | uniq | bin/c++filt | grep '^[a-zA-Z_]*::' > cpp_symbols.txt
          fi
          # cpp_symbols.txt contains a list of all C++ symbols, sorted and deduped
          # get a list of all top-level namespaces (except system namespaces)
          cat cpp_symbols.txt | cut -d: -f1 | sort | uniq > cpp_namespaces.txt
          echo "List of all namespaces found:"
          cat cpp_namespaces.txt
          # Filter out renamed namespaces (f_b_*), standard namespaces, and the public namespace (firebase::).
          # These are all specified in the respective scripts, package.sh and merge_libraries.py
          echo $(sdk-src/build_scripts/desktop/package.sh -R)'.*' > allow_namespaces.txt
          sdk-src/build_scripts/desktop/package.sh -N >> allow_namespaces.txt
          python sdk-src/scripts/print_allowed_namespaces.py >> allow_namespaces.txt
          allow_namespaces=$(cat allow_namespaces.txt | tr '\n' '|')
          cat cpp_namespaces.txt | grep -vE "^(${allow_namespaces})$" > extra_namespaces.txt
          # If there are any namespaces in this file, print an error.
          if [[ -s extra_namespaces.txt ]]; then
            echo '::error ::Unrenamed C++ namespaces in ${{ matrix.sdk_platform }}${{ matrix.suffix }} package:%0A'$(cat extra_namespaces.txt | tr '\n' ' ' | sed 's/ /%0A/g')
            exit 1
          fi

      - name: cleanup build artifacts
        if: |
          (
            (github.event.inputs.preserveIntermediateArtifacts == 0 || github.event.inputs.preserveIntermediateArtifacts == '')
            && github.event.inputs.downloadPublicVersion == ''
            && github.event.inputs.downloadPreviousRun == ''
          )
        # Remove the build artifacts that were consumed during this step of packaging.
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            firebase-cpp-sdk-${{ matrix.sdk_platform }}${{ matrix.suffix }}*-build
          failOnError: false
          useGlob: true

  # TODO : Check if removeable or not
  download_sdk_package:
    name: download-sdk-package
    runs-on: ubuntu-20.04
    needs: [log_inputs]
    if: ${{ github.event.inputs.downloadPublicVersion != '' || github.event.inputs.downloadPreviousRun != '' }}
    steps:
      - name: fetch artifact from previous run
        uses: dawidd6/action-download-artifact@v2
        if: ${{ github.event.inputs.downloadPreviousRun != '' }}
        with:
          name: 'firebase_cpp_sdk.zip'
          workflow: 'cpp-packaging.yml'
          run_id: ${{ github.event.inputs.downloadPreviousRun }}

      - name: fetch public SDK package from web
        if: ${{ github.event.inputs.downloadPublicVersion != '' && github.event.inputs.downloadPreviousRun == '' }}
        run: |
          if [[ ! "${{ github.event.inputs.downloadPublicVersion }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo Invalid version number: "${{ github.event.inputs.downloadPublicVersion }}"
            exit 1
          fi
          set +e
          # Retry up to 10 times because Curl has a tendency to timeout on
          # Github runners.
          for retry in {1..10} error; do
          if [[ $retry == "error" ]]; then exit 5; fi
            curl -L https://dl.google.com/firebase/sdk/cpp/firebase_cpp_sdk_${{ github.event.inputs.downloadPublicVersion }}.zip --output firebase_cpp_sdk.zip && break
            sleep 300
          done
          set -e

      - name: compute SDK hash
        shell: bash
        run: |
          ${{ env.hashCommand }} --tag firebase_cpp_sdk.zip > firebase_cpp_sdk_hash.txt
          echo "::warning ::$(cat firebase_cpp_sdk_hash.txt)"

      - name: upload hash
        uses: actions/upload-artifact@v3
        with:
          name: firebase_cpp_sdk_hash.txt
          path: firebase_cpp_sdk_hash.txt

      - name: upload SDK zip
        uses: actions/upload-artifact@v3
        with:
          name: firebase_cpp_sdk.zip
          path: firebase_cpp_sdk.zip


  merge_packages:
    name: final-merge-packages
    runs-on: ubuntu-20.04
    if: ${{ github.event.inputs.downloadPublicVersion == '' && github.event.inputs.downloadPreviousRun == '' }}
    needs: [package_desktop, log_inputs]
    steps:
      - name: fetch SDK
        uses: actions/checkout@v3
        with:
          path: sdk-src

      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          # download-artifact doesn't support wildcards, but by default
          # will download all artifacts. Sadly this is what we must do.
          path: artifacts

      - name: merge SDK packages
        shell: bash
        run: |
          set -ex
          mkdir -p firebase-cpp-sdk-final/firebase_cpp_sdk
          for pkg in artifacts/firebase-cpp-sdk-*-package/*.tgz; do
            tar -xzf "${pkg}" -C firebase-cpp-sdk-final/firebase_cpp_sdk
          done
          # Add the final files.
          sdk-src/build_scripts/other/package.sh sdk-src firebase-cpp-sdk-final/firebase_cpp_sdk

          # Zip up the package and grab a hash of the result.
          cd firebase-cpp-sdk-final
          # Save the hash of every file into the SDK package.
          find firebase_cpp_sdk -type f -print0 | xargs -0 ${{ env.hashCommand }} --tag > file_hashes.txt
          mv file_hashes.txt firebase_cpp_sdk/
          # Zip up the SDK package recursively, preserving symlinks.
          zip -9 -r -y ../firebase_cpp_sdk.zip firebase_cpp_sdk
          cd ..

      - name: compute SDK hash
        shell: bash
        run: |
          ${{ env.hashCommand }} --tag firebase_cpp_sdk.zip > firebase_cpp_sdk_hash.txt
          echo "::warning ::$(cat firebase_cpp_sdk_hash.txt)"

      - name: Print final package contents
        shell: bash
        run: |
          cd firebase-cpp-sdk-final
          find firebase_cpp_sdk -type f

      - name: upload hash
        uses: actions/upload-artifact@v3
        with:
          name: firebase_cpp_sdk_hash.txt
          path: firebase_cpp_sdk_hash.txt

      - name: upload SDK zip
        uses: actions/upload-artifact@v3
        with:
          name: firebase_cpp_sdk.zip
          path: firebase_cpp_sdk.zip        

  cleanup_packaging_artifacts:
    # Clean up intermediate artifacts from packaging step.
    # This can happen after the final package merge is finished.
    name: cleanup-packaging-artifacts
    runs-on: ubuntu-20.04
    needs: [merge_packages]
    if: |
      (
        (github.event.inputs.preserveIntermediateArtifacts == 0 || github.event.inputs.preserveIntermediateArtifacts == '')
        && github.event.inputs.downloadPublicVersion == ''
        && github.event.inputs.downloadPreviousRun == ''
      )
    steps:
    - uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          packaging-tools-*
          firebase-cpp-sdk-*-package
        failOnError: false
        useGlob: true